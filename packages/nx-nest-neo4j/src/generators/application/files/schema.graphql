# The @relationship directive is used to define relationships.
# DateTime and Point scalar types are available and map to the equivalent native Neo4j database types.
# The @timestamp directive is used to indicate the property will be automatically updated when the node is created and updated.
# The @id directive marks a field as a unique identifier and enables auto-generation when the node is created.

# define scalars
scalar JSON

type User {
  id: ID @id
  username: String!
  password: String! @private
  roles: [String!]!
  firstName: String
  lastName: String
  email: String
  # neo4j don't support json objects, serialize object and store as string
  metaData: String
}

# Custom resolvers

input SignUpInput {
  username: String!
  password: String!
  firstName: String
  lastName: String
  email: String
  metaData: JSON
}

input SignInInput {
  username: String!
  password: String!
}

type Mutation {
  signUp(signUpInput: SignUpInput): String!
  signIn(signInInput: SignInInput!): String!
}
